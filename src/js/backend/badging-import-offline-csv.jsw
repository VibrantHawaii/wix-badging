import { mediaManager } from 'wix-media-backend';
import wixData from 'wix-data';
import {fetch} from 'wix-fetch';

const HST_TO_UTC_OFFSET = 10*60*60*1000;
const MAGIC_SUPPORTS_WORD = "Supports";
let offlineClassCSVStruct = {
    "1": {
        "title": "Badge Awarded Date",
        "type": "awardedDate"
    },
    "2": {
        "title": "Badge Expiry Date (if any)",
        "type": "expiryDate"
    },
    "3": {
        "title": "Name",
        "type": "name"
    },
    "4": {
        "title": "Email",
        "type": "email"
    }
    // IMPORTANT All other additional columns are supported regions with type bool
};
let offlineClassCSVStructSeeded = false;
let regions = [];

// Test vectors
// {
//     "fileName": "319c21_aabc0ad684094d00bec29df2f40187ad.csv",
//     "badgeRef": "d646565f-834c-4474-86d1-18759e3df38e"
// }
export function importOfflineClassCSV(fileName, badgeRef) {
    function validateFile(fileName) {
        let awardedUserDict = {};
        let awardedBadgesDict = {};
        let existingUserResults = {};

        return new Promise((resolve,reject) => {
            resolve(fetchFileFromMediaManager(fileName));
        })
            .then(fileText => validateOfflineClassCSVFormat(fileText))
            .then(arrayedCSV => createUserDict(arrayedCSV, offlineClassCSVStruct, badgeRef))
            .then(awardedUserDictResult => {
                awardedUserDict = awardedUserDictResult;
                // Fetch list of all existing users
                return wixData.query("Badging-Users")
                    .ascending("title")
                    .find();
            })
            .then( existingUserResultsResult => {
                existingUserResults = existingUserResultsResult;
                // Tag each awarded user dict entry as to whether they exist in the User collection yet.
                // TODO change to using name and email hash
                return existingUserResults.items.map((existingUser) => {
                    return existingUser.title;
                });
            })
            .then(allExistingUsers => {
                return Object.entries(awardedUserDict).map(([id, awardedUser]) => {
                    return new Promise((resolve, reject) => {
                        // TODO change to using name and email hash

                        if ((allExistingUsers.includes(awardedUser.name))) {
                            // TODO use hash
                            let existingUser = existingUserResults.items.find(user => user.title == awardedUser.name);
                            // TODO use hash
                            awardedUserDict[awardedUser.name]._id = existingUser._id;
                            resolve();
                        }
                        else {
                            // TODO generate hash

                            // Add new user
                            let newUser = {
                                "title": awardedUser.name,
                            };

                            let newUserEntry = {};

                            return wixData.insert("Badging-Users", newUser)
                                .then( (newUserEntryResult) => {
                                    newUserEntry = newUserEntryResult;
                                    awardedUserDict[awardedUser.name]._id = newUserEntry._id;

                                    // TODO use hash
                                    return wixData.insertReference("Badging-Users", "supportedRegionsRef", newUserEntry._id, awardedUser.supportsRegions);
                                })
                                .then( () => {
                                    let newUserPII = {
                                        "title": awardedUser.pii.email,
                                        "email": awardedUser.pii.email,
                                        "userRef": newUserEntry._id
                                    };

                                    return wixData.insert("Badging-Users-PII", newUserPII);
                                })
                                .then( () => resolve())
                                .catch((error) => {
                                    console.error(error);
                                    reject(error);
                                });
                        }
                    })
                })
            })
            .then(newUserCreation => Promise.all(newUserCreation))
            .then(() => mapAdawdedUserstoAwardedBadgesDict(awardedUserDict))
            .then((newAwardedBadgesDictResults) => {
                awardedBadgesDict = newAwardedBadgesDictResults;

                return Object.entries(awardedBadgesDict).map(([newAwardedBadgeID, newBadgeAwards]) => {
                    // For each badge type awarded
                    return new Promise((resolve, reject) => {
                        // Query for existing awards
                        return wixData.query("Badging-AwardedBadges")
                            .contains("badgeRef", newAwardedBadgeID)
                            .find()
                            .then(existingBadgeAwards => {
                                const existingAwardedUsers = existingBadgeAwards.items.map(existingAwardedUser => {
                                    return existingAwardedUser.userRef;
                                });

                                return newBadgeAwards.map((newBadgeAward) => {
                                    // For each badge awarded
                                    return new Promise((resolve, reject) => {
                                        // For each user newly awarded the badge
                                        let deleteOldAward = undefined;
                                        if (existingAwardedUsers.find(existingBadgeID => {
                                            return newBadgeAward.userRef == existingBadgeID;
                                        })) {
                                            // Consolodate existing awards for matching userRefs
                                            // Ruleset: use first awardedDate and newest expiryDate (if any)
                                            const originalAward = existingBadgeAwards.items.find(existingBadge => {
                                                return existingBadge.userRef === newBadgeAward.userRef;
                                            })

                                            const originalAwardedDate = new Date(originalAward.awardedDate);
                                            // Fixups to translate input dates/times (assumed to be HST) to UTC
                                            const newAwardedDate = new Date(newBadgeAward.awardedDate);
                                            newBadgeAward.awardedDate = originalAwardedDate.getTime() < (new Date(fixUpDateForHST(newAwardedDate))).getTime() ? originalAward.awardedDate :  fixUpDateForHST(newBadgeAward.awardedDate);

                                            deleteOldAward = originalAward._id;
                                        }
                                        else
                                            // Not a match
                                            newBadgeAward.awardedDate = fixUpDateForHST(newBadgeAward.awardedDate);

                                        if (newBadgeAward.expiryDate !== undefined) {
                                            newBadgeAward.expiryDate = fixUpDateForHST(newBadgeAward.expiryDate);
                                        }

                                        // Add award entry
                                        let newAward = {
                                            "badgeRef": newAwardedBadgeID,
                                            "userRef": newBadgeAward.userRef,
                                            "awardedDate": new Date(newBadgeAward.awardedDate),
                                            "expiryDate": newBadgeAward.expiryDate
                                        };

                                        return wixData.insert("Badging-AwardedBadges", newAward)
                                            .then( () => {
                                                if (deleteOldAward) {
                                                    // delete old badge in DB
                                                    return wixData.remove("Badging-AwardedBadges", deleteOldAward)
                                                        .then(() => resolve())
                                                }
                                                else
                                                    resolve();
                                            })
                                    });
                                })
                            })
                            .then(badgeIssuance => Promise.all(badgeIssuance))
                            .then(() => resolve())
                            .catch((error) => {
                                console.error(error);
                                reject(error);
                            });
                    })
                })
            })
            .then(badgeIssuance => Promise.all(badgeIssuance))
            .catch((error) => {
                console.error(error);
            });
    }

    if (offlineClassCSVStructSeeded)
        return validateFile(fileName)
    else
        return seedOfflineClassCSVStruct().then(() => { return validateFile(fileName)});
}

function fixUpDateForHST(originalDate) {
    let unfixedDate = new Date(originalDate);
    const fixedDateinMS = unfixedDate.getTime() + (HST_TO_UTC_OFFSET);
    return new Date(fixedDateinMS);
}

function mapAdawdedUserstoAwardedBadgesDict (awardedUsersDict) {
    let awardedBadgesDict = {};
    Object.entries(awardedUsersDict).map(([id, userEntry]) => {
        if (awardedBadgesDict[userEntry.award.badgeRef] === undefined)
            awardedBadgesDict[userEntry.award.badgeRef] = [];

        awardedBadgesDict[userEntry.award.badgeRef].push(
            {
                userRef: userEntry._id,
                awardedDate: userEntry.award.awardedDate,
                expiryDate: userEntry.award.expiryDate
            }
        );
    })
    return awardedBadgesDict;
}

function validateOfflineClassCSVFormat(csvText) {
    return validateCSVFormat(csvText, offlineClassCSVStruct)
}

function validateCSVFormat(csvText, structure) {
    return new Promise((resolve, reject) => {
        // Convert csvText to array of arrays
        let arrayedCSV = convertCSVTextToArray(csvText);

        if (arrayedCSV.length < 2) {
            logAndThrowError("No rows found in CSV apart from the header row");
        }

        // test first row (header) length eq struct length (width)
        if (arrayedCSV[0].length != Object.keys(structure).length) {
            logAndThrowError("Header row is " + arrayedCSV[0].length + " columns, it should be " + Object.keys(structure).length);
        }

        // validate first row (header) contents eq struct
        arrayedCSV[0].forEach((csvTitle, index) => {
            if (arrayedCSV[0][index].toUpperCase() != structure[(index + 1) + ""].title.toUpperCase()) {
                logAndThrowError("Header row " + arrayedCSV[0] + " is not identical (including order) to the structure column titles");
            }
        });

        // TODO fix up error handling

        // Test if all rows have the same number of columns (as the header row)
        if (!arrayedCSV.every((currentEntry) => {
            return arrayedCSV[0].length === currentEntry.length;
        })) {
            logAndThrowError("Not all rows have the correct number of columns (" + arrayedCSV[0].length + ")");
        }

        // Validate each cell entry after first row for type
        // types: date, name, email, bool
        let orderedTypes = Array.from(Array(arrayedCSV[0].length).keys())
        Object.keys(offlineClassCSVStruct).forEach((key) => {
            orderedTypes[parseInt(key) - 1] = offlineClassCSVStruct[key].type;
        });

        arrayedCSV.every((row, rowIndex) => {
            if (rowIndex !== 0) {
                return row.every((entry, colIndex) => {
                    return validateEntryType(entry, orderedTypes[colIndex], rowIndex, colIndex)
                });
            }

            return true;
        });

        resolve(arrayedCSV);
    })
        .catch( (error) => {
            throw error;
        })
}

// On success returns the text of the (intended CSV) file
function fetchFileFromMediaManager(fileName) {
    return mediaManager.getFileUrl(fileName).then((url) => {
        return fetch(url).then((theFile) => {
            return theFile.text().then((theText) => {
                return(theText);
            });
        });
    })
        .catch((error) => {
            return(error);
        });
}

// Extends the struct with the "Supports <each region name>" members
function seedOfflineClassCSVStruct() {
    return wixData.query("Badging-Regions")
        .ascending("title")
        .find()
        .then( (results) => {
            if (results.length > 0) {
                regions = results.items;
                regions.sort((firstEl, secondEl) => {
                    if ((firstEl.title == "Hāmākua") && (secondEl.title == "Hilo"))
                        return -1;
                    else
                        return 1;
                });

                let originalOfflineClassCSVStructLength = Object.keys(offlineClassCSVStruct).length;
                let nextElementIndex = originalOfflineClassCSVStructLength + 1;

                regions.forEach(region => {
                    offlineClassCSVStruct[nextElementIndex] = {
                        "title": MAGIC_SUPPORTS_WORD + " " + region.title,
                        "type": "bool",
                    };
                    nextElementIndex++;
                });
                offlineClassCSVStructSeeded = true;
            } else {
                logAndThrowError("No regions found!");
            }
        });
}

function logAndThrowError(message) {
    console.error(message);
    throw(Error(message));
}

function validateEntryType(entry, type, rowIndex, colIndex) {
    function failedValidation(entry, type, rowIndex, colIndex) {
        logAndThrowError("Entry \"" + entry + "\" in 1-based row " + (rowIndex + 1) + " and 1-based column " + (colIndex + 1) + " is not of type " + type);
        return false;
    }

    switch (type) {
        case "bool":
            if (!["Yes","No","YES","NO","yes","no","Y","N","y","n", ""].includes(entry))
                return failedValidation(entry, type, rowIndex, colIndex)
            break;

        case "name":
            if (entry.length < 3)
                return failedValidation(entry, type, rowIndex, colIndex)
            break;

        case "email":
            if (entry.length < 3)
                return failedValidation(entry, type, rowIndex, colIndex)
            if (entry.match(/[\w+-_~.]{1,}@[\w+-_~]{1,}\.[\w+-_~]{1,}/) === null)
                return failedValidation(entry, type, rowIndex, colIndex)
            break;

        case "awardedDate":
        case "expiryDate":
            // Example: "7/1/2021"
            if (entry.match("\\d{1,2}/\\d{1,2}/\\d{4}") === null)
                failedValidation(entry, type, rowIndex, colIndex)
            break;

        default:
            logAndThrowError("Unknown type requested for validation: " + type)
            return false;
    }
    return true;
}

function createUserDict(csvArray, structure, badgeRef) {
    // Extract key: user names
    // TODO update to hash of username and email
    let userDict = {};

    function getCSVColumn(type) {
        let columnDict = Object.entries(structure).find(element => element[1].type === type);
        let oneIndexedResult = Number(columnDict[0]);
        return oneIndexedResult - 1;
    }

    let awardedDateColumn = getCSVColumn("awardedDate");
    let expiryDateColumn = getCSVColumn("expiryDate");
    let nameColumn = getCSVColumn("name");
    let emailColumn = getCSVColumn("email");

    // Skip header row [0]
    let firstIndexOfSupportedRegion = Object.keys(structure).length - regions.length;
    for (let rowIndex = 1; rowIndex < csvArray.length; rowIndex++) {
        let name = csvArray[rowIndex][nameColumn];
        let supportedRegions = regions.filter((region, index) => {
            let regionColIndexInCSV = firstIndexOfSupportedRegion + index;
            let csvEntry = csvArray[rowIndex][regionColIndexInCSV];
            return boolStringToBool(csvEntry);
        });
        let supportedRegionIDs = supportedRegions.map((region) => {
            return region._id;
        })
        userDict[name] = {
            'name': name,
            'pii': {
                'email': csvArray[rowIndex][emailColumn],
            },
            'award': {
                'badgeRef': badgeRef,
                'awardedDate': csvArray[rowIndex][awardedDateColumn],
                'expiryDate': csvArray[rowIndex][expiryDateColumn],
            },
            'supportsRegions': supportedRegionIDs
        };
    }

    return userDict;
}

function boolStringToBool(target) {
    return ["Yes","YES","yes","Y","y"].includes(target);
}

function convertCSVTextToArray(csvText) {
    let linedCSV = csvText.split("\n");
    let arrayedCSV = [];
    linedCSV.forEach(element => {
        arrayedCSV.push(element.replace(/[\n\r]+/g, '').trim().split(","))
    });
    return arrayedCSV;
}