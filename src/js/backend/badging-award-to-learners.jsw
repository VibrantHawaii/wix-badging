import wixData from 'wix-data';
import {fixUpDateForHST, isLearnerProfileComplete} from 'public/badging-utils'
import {createLearner} from "backend/badging-create-learner";
import {requestProfileUpdate} from "backend/badging-request-profile-update"
import {updateLearner} from "backend/badging-update-learner";

// awardedUserDict[learnerToken] = {
//     'name': name,
//     'learnerToken': learnerToken,
//     'pii': {
//         'email': email,
//     },
//     'award': {
//         'badgeRef': badgeRef,
//         'awardedDate': awardedDate,
//         'expiryDate': expiryDate,
//         'publicize': false
//     },
//     'supportsRegions': supportedRegionIDs // undefined to not update
// };
export function awardToLearners(awardedUserDict, eulaId) { // eulaId null to not update
    let awardedBadgesDict = {};
    let existingUserResults = {};

    // Fetch list of all existing learners
    return wixData.query("Badging-Learners")
        .find()
        .then( existingUserResultsResult => {
            existingUserResults = existingUserResultsResult;
            // Tag each awarded learner dict entry as to whether they exist in the User collection yet.
            return existingUserResults.items.map((existingUser) => {
                return existingUser.learnerToken;
            });
        })
        .then(allExistingUsers => {
            return Object.entries(awardedUserDict).map(([id, awardedUser]) => {
                return new Promise((resolve, reject) => {
                    if ((allExistingUsers.includes(awardedUser.learnerToken))) {
                        let existingUser = existingUserResults.items.find(learner => learner.learnerToken == awardedUser.learnerToken);
                        awardedUserDict[awardedUser.learnerToken]._id = existingUser._id;
                        updateLearner(awardedUser.learnerToken, awardedUser.supportsRegions, eulaId);
                        resolve();
                    }
                    else
                    {
                        return createLearner(awardedUser.name,  awardedUser.pii.email, awardedUser.supportsRegions, eulaId, awardedUser.teachableInferredEulaDate)
                            .then(newLearner => {
                                awardedUserDict[awardedUser.learnerToken]._id = newLearner.learner._id;
                                resolve();
                            })
                    }
                })
            })
        })
        .then(newUserCreation => Promise.all(newUserCreation))
        .then(() => mapAwardedUserstoAwardedBadgesDict(awardedUserDict))
        .then((newAwardedBadgesDictResults) => {
            awardedBadgesDict = newAwardedBadgesDictResults;

            return Object.entries(awardedBadgesDict).map(([newAwardedBadgeID, newBadgeAwards]) => {
                // For each badge type awarded query for existing awards
                return wixData.query("Badging-AwardedBadges")
                    .contains("badgeRef", newAwardedBadgeID)
                    .find()
                    .then(existingBadgeAwards => {
                        const existingAwardedUsers = existingBadgeAwards.items.map(existingAwardedUser => {
                            return existingAwardedUser.learnerRef;
                        });

                        return newBadgeAwards.map((newBadgeAward) => {
                            // For each badge awarded
                            let deleteOldAward = undefined;
                            if (existingAwardedUsers.find(existingBadgeID => {
                                return newBadgeAward.learnerRef == existingBadgeID;
                            })) {
                                // Consolodate existing awards for matching learnerRefs
                                // Ruleset: use first awardedDate and newest expiryDate (if any)
                                const originalAward = existingBadgeAwards.items.find(existingBadge => {
                                    return existingBadge.learnerRef === newBadgeAward.learnerRef;
                                })

                                const originalAwardedDate = new Date(originalAward.awardedDate);
                                // Fixups to translate input dates/times (assumed to be HST) to UTC
                                const newAwardedDate = new Date(newBadgeAward.awardedDate);
                                newBadgeAward.awardedDate = originalAwardedDate.getTime() < (new Date(fixUpDateForHST(newAwardedDate))).getTime() ? originalAward.awardedDate :  fixUpDateForHST(newBadgeAward.awardedDate);

                                deleteOldAward = originalAward._id;
                            }
                            else
                                // Not a match
                                newBadgeAward.awardedDate = fixUpDateForHST(newBadgeAward.awardedDate);

                            if (newBadgeAward.expiryDate !== undefined) {
                                newBadgeAward.expiryDate = fixUpDateForHST(newBadgeAward.expiryDate);
                            }

                            const sequenceID = Date.now().toString() + ":" + newAwardedBadgeID.toString() + ":" + newBadgeAward.learnerRef.toString();

                            // Add award entry
                            let newAward = {
                                "title": sequenceID,
                                "badgeRef": newAwardedBadgeID,
                                "learnerRef": newBadgeAward.learnerRef,
                                "awardedDate": new Date(newBadgeAward.awardedDate),
                                "expiryDate": newBadgeAward.expiryDate,
                                "publicize": newBadgeAward.publicize
                            };

                            return wixData.insert("Badging-AwardedBadges", newAward, {suppressAuth: true})
                                .then( () => {
                                    if (deleteOldAward) {
                                        // delete old badge in DB
                                        return wixData.remove("Badging-AwardedBadges", deleteOldAward, {suppressAuth: true});
                                    }
                                    else
                                        return Promise.resolve();
                                })
                                .then(() => {
                                    return wixData.query("Badging-Learners")
                                        .contains("_id", newBadgeAward.learnerRef)
                                        .include("supportedRegionsRef", "eulaRef")
                                        .find()
                                })
                                .then(learnerResults => {
                                    if (learnerResults.items.length != 1)
                                        throw("Unique learner ID not found " + newBadgeAward.learnerRef);

                                    const learner = learnerResults.items[0];

                                    // if (!isLearnerProfileComplete(learner))
                                    return requestProfileUpdate(learner._id, newAwardedBadgeID);
                                    // else
                                    // return Promise.resolve();
                                })
                        });
                    })
                    .then(badgeIssuance => Promise.all(badgeIssuance))
                    .catch((error) => {
                        console.error(error);
                        throw(error);
                    });
            })
        })
        .then(badgeIssuance => Promise.all(badgeIssuance))
        .then(() => {
            return {success: true};
        })
        .catch((error) => {
            console.error(error);
            return {
                "success": false,
                "errorMsg": error.toString()
            };
        });
}

function mapAwardedUserstoAwardedBadgesDict (awardedUsersDict) {
    let awardedBadgesDict = {};
    Object.entries(awardedUsersDict).map(([id, learnerEntry]) => {
        if (awardedBadgesDict[learnerEntry.award.badgeRef] === undefined)
            awardedBadgesDict[learnerEntry.award.badgeRef] = [];

        awardedBadgesDict[learnerEntry.award.badgeRef].push(
            {
                "learnerRef": learnerEntry._id,
                "awardedDate": learnerEntry.award.awardedDate,
                "expiryDate": learnerEntry.award.expiryDate,
                "publicize": learnerEntry.award.publicize
            }
        );
    })
    return awardedBadgesDict;
}
